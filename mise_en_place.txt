#########################################
# ‚úîÔ∏è Checklist Projet Supermarket Chatbot
#########################################

-------------------------------
üîß Backend : Django + MongoDB
-------------------------------

1Ô∏è‚É£ Installation de Django
   -> pip install django

2Ô∏è‚É£ Gestion des variables d'environnement
   -> pip install python-decouple
   - Cr√©ation d‚Äôun fichier .env
   - Segmentation des settings :
       - base.py (commun)
       - local.py (d√©veloppement)
       - production.py (production)
   - Chargement des variables avec decouple :
       from decouple import config

3Ô∏è‚É£ Installation de MongoDB avec pymongo
   -> python -m pip install "pymongo[srv]"

4Ô∏è‚É£ Installation de MongoEngine
   -> pip install mongoengine
   - Connexion √† MongoDB avec MongoEngine dans base.py ou un fichier db.py d√©di√©

5Ô∏è‚É£ Cr√©ation du projet Django
   -> django-admin startproject supermarket_chatbot .

6Ô∏è‚É£ Architecture des settings
   -> base.py contient :
      - SECRET_KEY
      - DEBUG
      - ALLOWED_HOSTS
      - DATABASES (via MongoEngine)
      - LOGGING (param√©trage des logs)
      - INSTALLED_APPS
      - MIDDLEWARE commun
   -> local.py et production.py h√©ritent de base.py

7Ô∏è‚É£ Installation de Django Rest Framework
   -> pip install djangorestframework
   - Ajout de 'rest_framework' dans INSTALLED_APPS

8Ô∏è‚É£ Cr√©ation de l‚Äôapplication chatbot
   -> python manage.py startapp chatbot

   - üî∏ Impl√©mentation du mod√®le Mongo :
       - mongo_schema.py : d√©finition des collections (via mongoengine.Document)
   - üî∏ Encapsulation :
       - mongo_manager.py : gestion CRUD basique
       - mongo_factory.py : gestion de l'initialisation des managers
   - üî∏ Impl√©mentation des services m√©tiers :
       - Exemple : product_service.py, order_service.py, user_service.py
   - üî∏ Ajout de logs dans les services
   - üî∏ Tests unitaires des services avec pytest ou unittest

9Ô∏è‚É£ Mise en place de l‚Äôint√©gration continue (CI)
   -> GitHub Actions :
       - Tests automatiques √† chaque push
       - V√©rification du linting (flake8, black)
       - D√©ploiement conditionnel si besoin

üîü Gestion des routes Django (API)
   - urls.py g√©n√©ral
   - urls.py sp√©cifique pour l‚Äôapp chatbot
   - Liaison des routes aux services

-------------------------------
üé® Frontend : Next.js + React
-------------------------------

1Ô∏è‚É£ D√©ploiement du frontend avec Next.js
   -> npx create-next-app frontend

2Ô∏è‚É£ Installation de TailwindCSS pour le style :
   -> npm install -D tailwindcss postcss autoprefixer
   -> npx tailwindcss init -p

3Ô∏è‚É£ Structure Frontend :
   - /pages : Pages (Ex : products.js, orders.js, dashboard.js)
   - /components : Composants (Navbar, ProductCard, etc.)
   - /services : Gestion des appels API avec axios
   - /utils : Fonctions utilitaires

4Ô∏è‚É£ Connexion au backend Django API :
   - via axios dans services/productService.js :
   ```js
   const API_URL = process.env.NEXT_PUBLIC_API_URL;
